#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Project 4, FYS 3150 / 4150, fall 2013
\end_layout

\begin_layout Author
Odd Petter Sand and Nathalie Bonatout 
\end_layout

\begin_layout Standard
All our source code can be found at our GitHub repository for this project:
 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/NathalieB/Project4/"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
x
\end_layout

\begin_layout Section
Theory and Technicalities
\end_layout

\begin_layout Subsection
Closed form solution
\end_layout

\begin_layout Standard
We subtitute
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(x,t)=u(x,t)-u_{s}(x)=u(x,t)+x-1
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $u_{s}(x)=1-x$
\end_inset

 is the steady state solution that satisfies our boundary and initial conditions.
 We then set up the diffusion equation for 
\begin_inset Formula $v(x,t)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial^{2}v(x,t)}{\partial x^{2}}=\frac{\partial v(x,t)}{\partial t}
\]

\end_inset


\end_layout

\begin_layout Standard
with known boundary conditions
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(0,t)=v(1,t)=0\qquad t\geqslant0.
\]

\end_inset


\end_layout

\begin_layout Standard
The initial condition 
\begin_inset Formula $u(x,0)=0$
\end_inset

 then becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(x,0)=u(x,0)-u_{s}(x)=0-(1-x)=x-1\qquad0<x<1.
\]

\end_inset


\end_layout

\begin_layout Standard
The solution of this equation is known from pp.
 313-314 in the lecture notes, using 
\begin_inset Formula $L=1$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(x,t)=\sum_{n=1}^{\infty}A_{n}\sin(n\pi x)e^{-n^{2}\pi^{2}t}.
\]

\end_inset


\end_layout

\begin_layout Standard
We now find the Fourier series coefficients by partwise integration
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A_{n}=2\intop_{0}^{1}v(x,0)\sin(n\pi x)dx=2\intop_{0}^{1}(x-1)\sin(n\pi x)dx
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=2\left(\left[-(x-1)\frac{1}{n\pi}\cos(n\pi x)\right]_{0}^{1}-\intop_{0}^{1}-\frac{1}{n\pi}\cos(n\pi x)dx\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\frac{2}{n\pi}\left(\left[(1-x)\cos(n\pi x)\right]_{0}^{1}+\left[\frac{1}{n\pi}\sin(n\pi x)\right]_{0}^{1}\right)
\]

\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula 
\[
=\frac{2}{n\pi}(1+0)=\frac{2}{n\pi}
\]

\end_inset


\end_layout

\begin_layout Standard
and finally, by substitution, our closed form solution is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
u(x,t)=v(x,t)+u_{s}(x)=1-x+\sum_{n=1}^{\infty}\frac{2}{n\pi}\sin(n\pi x)e^{-n^{2}\pi^{2}t}.
\]

\end_inset


\end_layout

\begin_layout Subsection
Algorithms
\end_layout

\begin_layout Subsubsection
Explicit scheme
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

input: nSteps (# of interior points), time, v0 (function)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

deltaX = 1.0 / (nSteps + 1)
\end_layout

\begin_layout Plain Layout

alpha = 0.5
\end_layout

\begin_layout Plain Layout

deltaT = alpha * deltaX ^ 2
\end_layout

\begin_layout Plain Layout

tSteps = 1.0 / deltaT
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

define v, vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	v[i] = v0(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( t = 1; t <= tSteps)
\end_layout

\begin_layout Plain Layout

	for( i = 1 --> nSteps )
\end_layout

\begin_layout Plain Layout

		vNext[i] = (1 - 2 * alpha) * v[i]
\end_layout

\begin_layout Plain Layout

		if( i > 0 ) : vNext[i] += alpha * v[i-1] // else += 0
\end_layout

\begin_layout Plain Layout

		if( i < nSteps ) : vNext[i] += alpha * v[i+1] // else += 0
\end_layout

\begin_layout Plain Layout

	v = vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	u[i] = 1 - x + v[i]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

output: u
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implicit scheme
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

input: nSteps (# of interior points), time, tSteps, v0 (function)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

deltaX = 1.0 / (nSteps + 1)
\end_layout

\begin_layout Plain Layout

deltaT = 1.0 / tSteps
\end_layout

\begin_layout Plain Layout

alpha = deltaT / (deltaX ^ 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

define v, vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	v[i] = v0(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a = -alpha        // diagonal element
\end_layout

\begin_layout Plain Layout

b = 1 + 2*alpha   // off-diagonal element
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( t = 1; t <= tSteps)
\end_layout

\begin_layout Plain Layout

	tridiagonalSolver(a, b, v, vNext)
\end_layout

\begin_layout Plain Layout

	v = vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	u[i] = 1 - x + v[i]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

output: u
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Crank-Nicholson scheme
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

input: nSteps (# of interior points), time, tSteps, v0 (function)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

deltaX = 1.0 / (nSteps + 1)
\end_layout

\begin_layout Plain Layout

deltaT = 1.0 / tSteps
\end_layout

\begin_layout Plain Layout

alpha = deltaT / (deltaX ^ 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

define v, w
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	v[i] = v0(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a = 2 * (1 + alpha)    // diagonal element
\end_layout

\begin_layout Plain Layout

b = -alpha             // off-diagonal element
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( t = 1; t <= tSteps)
\end_layout

\begin_layout Plain Layout

	for( i = 0; i < nSteps )
\end_layout

\begin_layout Plain Layout

		w[i] = 2 * (1 - alpha) * v[i]
\end_layout

\begin_layout Plain Layout

		if( i > 0 ) : w[i] += alpha * v[i - 1] // else += 0
\end_layout

\begin_layout Plain Layout

		if( i < nSteps - 1 ) : w[i] += alpha * v[i + 1] // else += 0
\end_layout

\begin_layout Plain Layout

	tridiagonalSolver(a, b, w, v)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	u[i] = 1 - x + v[i]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

output: u
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tridiagonal form of the implicit schemes
\end_layout

\begin_layout Standard
The methods to reformulate the problem into a tridiagonal matrix equation
 is described in great detail in pp.
 308-312 in the lecture notes, so we will not reproduce them here.
\end_layout

\begin_layout Standard
In the case of the Crank-Nicholson sceme, it is easily seen (by the definition
 of matrix addition and multiplication of a matrix with a scalar) that the
 sum of a diagonal matrix and a tridiagonal matrix 
\begin_inset Formula $(2\mathbf{I}+\alpha\mathbf{B})$
\end_inset

 is also tridiagonal.
 We can then note that the known vector 
\begin_inset Formula $\mathbf{w}_{j-1}\equiv(2\mathbf{I}-\alpha\mathbf{B})\mathbf{v}_{j-1}$
\end_inset

is easily calculated in every step by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
w_{i}=2(1-\alpha)v_{i}+\alpha(v_{i-1}+v_{i+1})
\]

\end_inset


\end_layout

\begin_layout Standard
hence there is no reason to calculate the inverse matrix 
\begin_inset Formula $(2\mathbf{I}-\alpha\mathbf{B})^{-1}$
\end_inset

 or demand that it be tridiagonal.
 The operation above is 
\begin_inset Formula $\mathcal{O}(n)$
\end_inset

, just as the tridiagonal solver itself, so this does not affect the scaling
 of the algorithm.
\end_layout

\begin_layout Subsection
Truncation errors and stability
\end_layout

\begin_layout Standard
Simply use the table from p.
 350 in the slides.
\end_layout

\begin_layout Standard
If time: Do the Taylor expand for explicit scheme and find the actual error,
 not the order: p.
 346-347 in the slides.
 (Can use just the result in the C-N case.)
\end_layout

\begin_layout Standard
For explanations of the stability criteria, we again refer to the lecture
 notes (p.
 307-309, 312).
\end_layout

\begin_layout Section
Results and analysis
\end_layout

\begin_layout Subsection
Explicit scheme
\end_layout

\begin_layout Standard
x
\end_layout

\begin_layout Subsection
Implicit scheme
\end_layout

\begin_layout Standard
x
\end_layout

\begin_layout Subsection
Cranck-Nicholson scheme
\end_layout

\begin_layout Standard
x
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
What we learned.
\end_layout

\begin_layout Subsection
Critique
\end_layout

\begin_layout Standard
x
\end_layout

\end_body
\end_document
