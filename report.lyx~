#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Project 4, FYS 3150 / 4150, fall 2013
\end_layout

\begin_layout Author
Odd Petter Sand and Nathalie Bonatout 
\end_layout

\begin_layout Standard
All our source code can be found at our GitHub repository for this project:
 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/NathalieB/Project4/"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
How can biological processes such as the transport of signals between neurons
 be modelized on a computer? And what are the important criteria to look
 at, when writing such an algorithm ? These are the main questions that
 we used to lead our 4th project.
 
\end_layout

\begin_layout Standard
So the point here was to modelized the diffusion of neurotransmitters across
 the synaptic cleft.
 To do so, we implemented three methods, based on Taylor's expansion.: 
\end_layout

\begin_layout Itemize
the Explicit Scheme, also called forward Euler Scheme
\end_layout

\begin_layout Itemize
the Implicit Scheme, or backward Euler Scheme
\end_layout

\begin_layout Itemize
the Crank Nicolson Scheme.
\end_layout

\begin_layout Standard
We chose to look at this problem as a one dimension problem, assuming that
 the concentration of neurotransmitters only varies in the direction across
 the synaptic cleft.
 Thus, the diffusion equation will be for the whole project a one dimension
 one.
 In the first part of this report, we will see how to apply these algorithms
 to our system.
 Then, we will compare the three of them, and try t determine which one
 is the most appropriate given this system.
\end_layout

\begin_layout Section
Theory and Technicalities
\end_layout

\begin_layout Subsection
Closed form solution
\end_layout

\begin_layout Standard
We subtitute
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(x,t)=u(x,t)-u_{s}(x)=u(x,t)+x-1
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $u_{s}(x)=1-x$
\end_inset

 is the steady state solution that satisfies our boundary and initial conditions.
 We then set up the diffusion equation for 
\begin_inset Formula $v(x,t)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial^{2}v(x,t)}{\partial x^{2}}=\frac{\partial v(x,t)}{\partial t}
\]

\end_inset


\end_layout

\begin_layout Standard
with known boundary conditions
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(0,t)=v(1,t)=0\qquad t\geqslant0.
\]

\end_inset


\end_layout

\begin_layout Standard
The initial condition 
\begin_inset Formula $u(x,0)=0$
\end_inset

 then becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(x,0)=u(x,0)-u_{s}(x)=0-(1-x)=x-1\qquad0<x<1.
\]

\end_inset


\end_layout

\begin_layout Standard
The solution of this equation is known from pp.
 313-314 in the lecture notes, using 
\begin_inset Formula $L=1$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v(x,t)=\sum_{n=1}^{\infty}A_{n}\sin(n\pi x)e^{-n^{2}\pi^{2}t}.
\]

\end_inset


\end_layout

\begin_layout Standard
We now find the Fourier series coefficients by partwise integration
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A_{n}=2\intop_{0}^{1}v(x,0)\sin(n\pi x)dx=2\intop_{0}^{1}(x-1)\sin(n\pi x)dx
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=2\left(\left[-(x-1)\frac{1}{n\pi}\cos(n\pi x)\right]_{0}^{1}-\intop_{0}^{1}-\frac{1}{n\pi}\cos(n\pi x)dx\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\frac{2}{n\pi}\left(\left[(1-x)\cos(n\pi x)\right]_{0}^{1}+\left[\frac{1}{n\pi}\sin(n\pi x)\right]_{0}^{1}\right)
\]

\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula 
\[
=\frac{2}{n\pi}(1+0)=\frac{2}{n\pi}
\]

\end_inset


\end_layout

\begin_layout Standard
and finally, by substitution, our closed form solution is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
u(x,t)=v(x,t)+u_{s}(x)=1-x+\sum_{n=1}^{\infty}\frac{2}{n\pi}\sin(n\pi x)e^{-n^{2}\pi^{2}t}.
\]

\end_inset


\end_layout

\begin_layout Standard
The derivatives are then
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\partial u(x,t)}{\partial t}=\frac{\partial v(x,t)}{\partial t}=\frac{\partial^{2}u(x,t)}{\partial x^{2}}=\frac{\partial^{2}v(x,t)}{\partial x^{2}}=\sum_{n=1}^{\infty}-2n\pi\sin(n\pi x)e^{-n^{2}\pi^{2}t}.
\]

\end_inset


\end_layout

\begin_layout Subsection
Algorithms
\end_layout

\begin_layout Subsubsection
Explicit scheme
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

input: nSteps (# of interior points), time, u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

deltaX = 1.0 / (nSteps + 1)
\end_layout

\begin_layout Plain Layout

alpha = 0.5
\end_layout

\begin_layout Plain Layout

deltaT = alpha * deltaX ^ 2
\end_layout

\begin_layout Plain Layout

tSteps = 1.0 / deltaT
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

define v, vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	v[i] = -u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( t = 1; t <= tSteps)
\end_layout

\begin_layout Plain Layout

	for( i = 1 --> nSteps )
\end_layout

\begin_layout Plain Layout

		vNext[i] = (1 - 2 * alpha) * v[i]
\end_layout

\begin_layout Plain Layout

		if( i > 0 ) : vNext[i] += alpha * v[i-1] // else += 0
\end_layout

\begin_layout Plain Layout

		if( i < nSteps ) : vNext[i] += alpha * v[i+1] // else += 0
\end_layout

\begin_layout Plain Layout

	v = vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	u[i] = v[i] + u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

output: u
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implicit scheme
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

input: nSteps (# of interior points), time, tSteps, u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

deltaX = 1.0 / (nSteps + 1)
\end_layout

\begin_layout Plain Layout

deltaT = 1.0 / tSteps
\end_layout

\begin_layout Plain Layout

alpha = deltaT / (deltaX ^ 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

define v, vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	v[i] = -u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a = -alpha        // diagonal element
\end_layout

\begin_layout Plain Layout

b = 1 + 2*alpha   // off-diagonal element
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( t = 1; t <= tSteps)
\end_layout

\begin_layout Plain Layout

	tridiagonalSolver(a, b, v, vNext)
\end_layout

\begin_layout Plain Layout

	v = vNext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	u[i] = v[i] + u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

output: u
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Crank-Nicolson scheme
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

input: nSteps (# of interior points), time, tSteps, u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

deltaX = 1.0 / (nSteps + 1)
\end_layout

\begin_layout Plain Layout

deltaT = 1.0 / tSteps
\end_layout

\begin_layout Plain Layout

alpha = deltaT / (deltaX ^ 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

define v, w
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	v[i] = -u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a = 2 * (1 + alpha)    // diagonal element
\end_layout

\begin_layout Plain Layout

b = -alpha             // off-diagonal element
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( t = 1; t <= tSteps)
\end_layout

\begin_layout Plain Layout

	for( i = 0; i < nSteps )
\end_layout

\begin_layout Plain Layout

		w[i] = 2 * (1 - alpha) * v[i]
\end_layout

\begin_layout Plain Layout

		if( i > 0 ) : w[i] += alpha * v[i - 1] // else += 0
\end_layout

\begin_layout Plain Layout

		if( i < nSteps - 1 ) : w[i] += alpha * v[i + 1] // else += 0
\end_layout

\begin_layout Plain Layout

	tridiagonalSolver(a, b, w, v)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for( i = 0; i < nSteps)
\end_layout

\begin_layout Plain Layout

	x = (i + 1) * deltaX
\end_layout

\begin_layout Plain Layout

	u[i] = v[i] + u_s(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

output: u
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tridiagonal form of the implicit schemes
\end_layout

\begin_layout Standard
The methods to reformulate the problem into a tridiagonal matrix equation
 is described in great detail in pp.
 308-312 in the lecture notes, so we will not reproduce them here.
\end_layout

\begin_layout Standard
In the case of the Crank-Nicolson scheme, it is easily seen (by the definition
 of matrix addition and multiplication of a matrix with a scalar) that the
 sum of a diagonal matrix and a tridiagonal matrix 
\begin_inset Formula $(2\mathbf{I}+\alpha\mathbf{B})$
\end_inset

 is also tridiagonal.
 We can then note that the known vector 
\begin_inset Formula $\mathbf{w}_{j-1}\equiv(2\mathbf{I}-\alpha\mathbf{B})\mathbf{v}_{j-1}$
\end_inset

is easily calculated in every step by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
w_{i}=2(1-\alpha)v_{i}+\alpha(v_{i-1}+v_{i+1})
\]

\end_inset


\end_layout

\begin_layout Standard
Hence there is no reason to calculate the inverse matrix 
\begin_inset Formula $(2\mathbf{I}-\alpha\mathbf{B})^{-1}$
\end_inset

 or demand that it be tridiagonal.
 The operation above is 
\begin_inset Formula $\mathcal{O}(n)$
\end_inset

, just as the tridiagonal solver itself, so this does not affect the scaling
 of the algorithm.
\end_layout

\begin_layout Subsection
Truncation errors and stability
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scheme
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Truncation error
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stability
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explicit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathcal{O}(\Delta x^{2})$
\end_inset

 and 
\begin_inset Formula $\mathcal{O}(\Delta t)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stable for 
\begin_inset Formula $\alpha\leq0.5$
\end_inset

, with 
\begin_inset Formula $\alpha=\frac{\triangle t}{\triangle x^{^{2}}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implicit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathcal{O}(\Delta x^{2})$
\end_inset

 and 
\begin_inset Formula $\mathcal{O}(\Delta t)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
always stable
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Crank-Nicolson
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathcal{O}(\Delta x^{2})$
\end_inset

 and 
\begin_inset Formula $\mathcal{O}(\Delta t^{2})$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
always stable
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Error scaling and stability of our schemes.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For explanations of these results, we again refer to the lecture notes (p.
 307-309, 312).
 We will investigate our actual error scaling and test the stability criteria.
\end_layout

\begin_layout Section
Results and analysis
\end_layout

\begin_layout Subsection
Explicit scheme
\end_layout

\begin_layout Standard
As discussed previously, the stability criteria for the explicit scheme
 is kind of a problem for the explicit scheme.
 Even though the algorithm is not so hard to write, we really have to pay
 attention to the quantity 
\begin_inset Formula $\frac{\triangle t}{\triangle x^{^{2}}}$
\end_inset

, since this is not stable for all 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $t$
\end_inset

.
 As soon as we try to compute things with 
\begin_inset Formula $\frac{\triangle t}{\triangle x^{^{2}}}>0.5$
\end_inset

, things get messy, and at ssome point, irrelevant.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Project4/Screen Report/alpha0_4_Explicit.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Plot for 
\begin_inset Formula $\frac{\triangle t}{\triangle x^{2}}=0.4$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Project4/Screen Report/alpha0_6_Explicit.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Plot for 
\begin_inset Formula $\frac{\triangle t}{\triangle x^{2}}=0.6$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implicit scheme
\end_layout

\begin_layout Standard
To implement this method, and the Crank Nicolson one, we chose to re-use
 the tridiagonal solver we implemented during the first lab.
 Event though the first step was to make some corrections, since we decided
 to write it for our specific case last time, it was still quite interesting
 to see that re-using an 
\begin_inset Quotes eld
\end_inset

old
\begin_inset Quotes erd
\end_inset

 piece of code was possible.
\end_layout

\begin_layout Subsection
Crank-Nicolson scheme
\end_layout

\begin_layout Standard
With the Crank Nicolson scheme, the conditions on the 
\begin_inset Formula $\alpha$
\end_inset

 used for the stability of the explicit scheme is no longer relevant: this
 algorithm is stable for every 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $t$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Project4/Screen Report/alpha0_4_CR.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Plot for 
\begin_inset Formula $\frac{\triangle t}{\triangle x^{2}}=0.4$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Project4/Screen Report/alpha0_6_CR.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Plot for 
\begin_inset Formula $\frac{\triangle t}{\triangle x^{2}}=0.6$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we can see that even though the Explicit scheme is easy to implement,
 the restriction given by its stability domain cannot make it the best scheme
 for our diffusion equation.
 The Crank Nicolson scheme is really interesting because we do not have
 this restriction anymore.
 But the number of steps to be computed increases, so we have to find a
 good balance between a fast, and a general algorithm.
 But it is important to underline the fact that our system can be seen as
 a tridiagonal one.
 Thus, solving this problem, with our old tridiagonal algorithm, is rather
 efficient, since our code is written for tridiagonal matrices.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
What we learned:
\end_layout

\begin_layout Itemize
Fourier series solutions of PDEs is a handy thing to remember, so we can
 compare to a closed form solution.
\end_layout

\begin_layout Itemize
In the implicit and Crank-Nicolson schemes, we do not need to show that
 the inverse matrices are tridiagonal.
 It just so happens that they are (though it seems non-trivial to prove),
 but our algorithm can work around that.
\end_layout

\begin_layout Subsection
Critique
\end_layout

\begin_layout Itemize
It would be helpful if the exercise text used 
\begin_inset Formula $u(x,t)$
\end_inset

 throughout and not the confusing 
\begin_inset Formula $u(x)$
\end_inset

 formulation that hides the time dependency.
 This is fine for 
\begin_inset Formula $u_{s}(x)$
\end_inset

 which is steady-state, but not for 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Itemize
It seems that exercise b) and c) merely asks you to reproduce what is in
 the lecture notes already.
 It is fine that we have to understand it, but just copying it seems unnecessary
, so we skipped it in the report.
\end_layout

\end_body
\end_document
